---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: Nataliana (PID A17096549)
format: pdf
---

Installs done in console: 
```{r}
#install.packages("BiocManager")
#BiocManager::install()
```

```{r}
# For this class we will need DESeq2:
#BiocManager::install("DESeq2")
```

```{r}
library(BiocManager)
library(DESeq2)
```


Today we will analyze some RNASeq data from Himes et al. on the effects of dexamthasone (dex), a synthetic glucocorticoid steroid on airway smooth muscle cells (ASM)

# Data import

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```


```{r}
head(counts)
```

```{r}
head(metadata)
```

>Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

- 38694

>Q2. How many ‘control’ cell lines do we have? 

```{r}
sum(metadata$dex == "control") 
#or
table(metadata$dex)
```

- 4

## Toy differential expression analysis

Calculate the mean per gene count values for all "control" samples (i.e. columns in `counts`) and do the same for "treated" and then compare them.

1. Find all "control" values/columns in `counts`

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[,control.inds]
```

2. Find the mean per gene across all control columns.

```{r}
control.mean <- apply(control.counts, 1, mean)
```


>Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

- rowSums

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

3. Find the mean per gene across all treated columns.

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[,treated.inds]
```


```{r}
treated.mean <- apply(treated.counts, 1, mean)
```

```{r}
mean.counts <- data.frame(control.mean, treated.mean)
```

>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(mean.counts)
```

>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

- point

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

- log

```{r}
plot(mean.counts, log="xy")
```

We most frequently use log2 transformations for this type of data

```{r}
log2(10/10)

log2(20/10)

log2(10/20)
```
- no change, because same value in both experiments log2 value of 0
- if you have twice as much change, log2 value of 1
- log2 value of -1 means you have halved the value
- log2 value of 2, means the value has quadrupled, etc. 

These log2 values make the interpretation of "fold-change" a little easier adn a rule-of-thumb in the field is a log2 fold-change of +2 or -2 is where to start to pay attention 

```{r}
log2(40/10)
```

Let's calculate the log2(fold-change) and add it to our `mean.counts` data.frame. 

```{r}
mean.counts$log2fc <- log2(mean.counts$treated.mean/mean.counts$control.mean)

head(mean.counts)
```

```{r}
to.rm <- rowSums(mean.counts[,1:2]==0) > 0
mycounts <- mean.counts[!to.rm,]


```

>Q. How many genes do I have left after this zero count filtering?

```{r}
nrow(mycounts)
```

>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

- The arr.ind argument will return both row and column indices when the values are TRUE. This will tell us which genes and samples have zero counts and ignore the genes that have zeros in any sample. We need to call the unique() function so no row is counted twice if it has zero entries in both samples.


1. I need to extract the log2fc values
2. I need to find those that are above +2
3. Count them

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(mycounts$log2fc > 2)
```


>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(mycounts$log2fc < (-2))
```


>Q10. Do you trust these results? Why or why not?

- Not yet. We have not analyzed the statistics of the results to know if they are meaningful such as p-value or st. dev. We don't know if the difference in the mean counts significant. 

## DESeq analysis

```{r}
#/ message: false
library(DESeq2)
```

The first function that we will use will setup the data in the way (format) DESeq wants it.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = metadata,
                              design = ~dex)
```

The function in the package is called `DESeq()` and we can run it on our `dds` object

```{r}
dds <- DESeq(dds)
```

I will get the results from dds with the `results()` function: 
```{r}
res <- results(dds)
head(res)
```

```{r}
log(0.0005)
log(0.00000000005)
```
- The more negative the log the higher the p-value


Make a common overall results figure from this analysis. This plot is designed to keep our inner biologist and inner stats nerd happy - it plots fold-change vs P-value

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(-2,+2), col="gray")
abline(h= -log(0.005), col="gray")
```

Add some color to this plot:
```{r}
mycolors <- rep("gray", nrow(res))
mycolors[res$log2FoldChange > 2] <- "red"
mycolors[ abs(res$log2FoldChange) > 2 ]  <- "red"
mycolors[res$padj > 0.005] <- "gray"



plot(res$log2FoldChange, -log(res$padj), col=mycolors)
abline(v=c(-2,+2), col="gray")
hor.line <- abline(h= -log(0.005), col="gray")
```



I want to save my results to date out to disc

```{r}
write.csv(res, file="myresults.csv")
```


```{r}
head(res)
```


## Annotations

I need to translate our gene identifiers "ESNG0000..." into gene names that the rest of the world can understand.

To do this "annotation" I will use the **"AnnotationDbi"** package. I can install thsi with `BiocManager::install()`

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)

columns(org.Hs.eg.db)
```

I will use the `mapIds()` function to "map" my identifiers to those from different databases. I will go between "ENSEMBL" and "SYMBOL" (and then after "GENENAME"). 

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "SYMBOL")

#head(res)
```


Add "GENENAME"

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "GENENAME")
```


ADD "ENTREZID"

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "ENTREZID")
```


```{r}
head(res)
```


Save our annotated results object.

```{r}
write.csv(res, file = "results_annotated.csv")
```


## Pathway Analysis

Not that we have our results with added annotation we can do some pathway mapping

Let's use the **gage** package to look for KEGG pathways in our results (genes of interest). I will also use the **pathview** package to draw little pathway figures.

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

What **gage** wants as input is not my big table/data.frame of results. It just wants a "vector of importance". For RNASeq data like we have this is our log2FC values...

```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Now, let's run the gage pathway analysis.

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

What is in this `keggres` object?

```{r}
attributes(keggres)
```

```{r}
head(keggres$less, 3)
```

Let's use the pathview package to look at one of these highlighted KEGG pathways with our genes highlighted. 
"hsa05310 Asthma"

```{r}
pathview(gene.data = foldchanges, pathway.id = "hsa05310")
```

![Asthma pathway with my DEGs](hsa05310.pathview.png)




